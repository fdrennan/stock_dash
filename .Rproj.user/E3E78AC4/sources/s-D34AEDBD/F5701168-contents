---
title: "User Rides"
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    social: menu
    source_code: https://git.io/vaZdx
    theme: flatly
runtime: shiny
---

```{r setup, include=FALSE}
library(flexdashboard)
library(readr)
library(tidyverse)
library(ggplot2)
library(bbplot)
library(tidyquant)



# Access to CRAN packages data stream
source("helpers.R")

# pkgStream is a reactive expression that represents a stream of
# new package download data; up to once a second it may return a
# data frame of new downloads since the last update.
pkgStream <- packageStream()

# pkgData is a reactive expression that accumulates previous values
# of pkgStream, discarding any that are older than maxAgeSecs.
maxAgeSecs <- 60 * 5 
pkgData <- packageData(pkgStream, maxAgeSecs)
```

Sidebar {.sidebar}
=======================================================================

### cran.rstudio.com

Lorem ipsum
[jcheng5/cransim](https://github.com/jcheng5/cransim).


```{r}
# Rate at which to flag high download traffic
sliderInput("rateThreshold", "Warn when rate exceeds:",
            min = 0, max = 50, value = 3, step = 0.1
)

# Maximum number of raw data rows to keep
numericInput("maxrows", "Recent downloads window:", 50)

selectizeInput(inputId = 'tickers', 
               label = 'tickers', 
               choices = c('AAPL', 'AMZN', 'BOA'), 
               selected = c('AAPL', 'AMZN'), 
               multiple = TRUE,
               options = NULL)
```


```{r}

clean_stock_data <- reactive({
  stocks <- tidyquant::tq_get(input$tickers, complete_cases = TRUE)

clean_stock_data <- 
  stocks %>% 
  group_by(symbol) %>% 
  arrange(symbol, desc(date)) %>% 
  mutate(diff = (close - lead(close))/lead(close))
})

pivoted_stock_data <- reactive({
  clean_stock_data() %>% 
  select(symbol, diff, date) %>% 
  pivot_wider(names_from = symbol, values_from = diff) %>% 
  filter(complete.cases(.))
})
```


Dashboard
=======================================================================

Row 
-----------------------------------------------------------------------

### Downloads per sec (last 5 min) {.value-box}

```{r}
# downloadRate is a reactive expression that computes the download
# rate during this dashboard's lifetime.
startTime <- as.numeric(Sys.time())
downloadRate <- reactive({
  elapsed <- as.numeric(Sys.time()) - startTime
  nrow(pkgData()) / min(maxAgeSecs, elapsed)
})

# Emit the download rate
renderValueBox({
  rate <- formatC(downloadRate(), digits = 1, format = "f")
  valueBox(
    value = rate,
    icon = "fa-area-chart",
    color = if (rate >= input$rateThreshold) "warning" else "primary"
  )
})
```

### Unique users {.value-box} 

```{r}
# usrCount is a reactive expression that keeps an approximate
# count of all of the unique users that have been seen since the
# app started.
usrCount <- userCount(pkgStream)

# Emit the user count
renderValueBox({
  valueBox(value = usrCount(), icon = "fa-users")
})
```


### Unique users {.value-box}

```{r}
# usrCount is a reactive expression that keeps an approximate
# count of all of the unique users that have been seen since the
# app started.
usrCount <- userCount(pkgStream)

# Emit the user count
renderValueBox({
  valueBox(value = usrCount(), icon = "fa-users")
})
```

Row {data-height=650}
-----------------------------------------------------------------------

### Stock over time
```{r}
renderPlot({
  ggplot(clean_stock_data()) + 
    aes(x = date, y = close, colour = symbol) + 
    geom_line() +
    bbc_style()
})
```


### Value of Household Content vs. Building  
```{r}
renderPlot({
  pivoted_stock_data() %>% 
    ggplot() +
    aes(x = AAPL, y = AMZN) +
    # geom_density_2d(alpha = 1) +
    geom_point(alpha = 1, size = .05) +
    geom_smooth(se = FALSE) +
    xlim(-.05, .05) +
    ylim(-.05, .05) +
    bbc_style()
})
```

Column {data-width=400}
-------------------------------------

### Total downloads {.value-box}
```{r}
gauge(50, min = 0, max = 100, symbol = '%', gaugeSectors(
  success = c(80, 100), warning = c(40, 79), danger = c(0, 39)
))
```

### Total downloads {.value-box}
```{r}
gauge(50, min = 0, max = 100, symbol = '%', gaugeSectors(
  success = c(80, 100), warning = c(40, 79), danger = c(0, 39)
))
```



Row 
-----------------------------------------------------------------------

### Percent of downloads (last 5 min) {data-width=340}

```{r}
renderTable({
  pkgData() %>%
    group_by(package) %>%
    tally() %>%
    arrange(desc(n), tolower(package)) %>%
    mutate(percentage = n / nrow(pkgData()) * 100) %>%
    select("Package" = package, "Percent" = percentage) %>%
    as.data.frame() %>%
    head(30)
}, digits = 1)

```


Recent Downloads
=======================================================================

### Recent Downlads

```{r}
renderTable({
  downloads <- tail(pkgData(), n = input$maxrows)
  downloads <- downloads[,c("date", "time", "size", "r_version", 
                            "r_arch", "r_os", "package")]
  downloads[order(nrow(downloads):1),]
})
```


