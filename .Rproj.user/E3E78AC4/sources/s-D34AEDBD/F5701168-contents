---
title: "Executive Dashboard"
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    social: menu
    visit_us: https://git.io/vaZdx
    theme: flatly
runtime: shiny
---

```{r setup, include=FALSE}
library(flexdashboard)
library(readr)
library(tidyverse)
library(ggplot2)
library(bbplot)
library(tidyquant)
library(rvest)
library(ggthemes)
library(r2d3)
stocks <- 
read_csv('https://raw.githubusercontent.com/datasets/s-and-p-500-companies-financials/master/data/constituents.csv')


# Access to CRAN packages data stream
source("helpers.R")

# pkgStream is a reactive expression that represents a stream of
# new package download data; up to once a second it may return a
# data frame of new downloads since the last update.
pkgStream <- packageStream()

# pkgData is a reactive expression that accumulates previous values
# of pkgStream, discarding any that are older than maxAgeSecs.
maxAgeSecs <- 60 * 5 
pkgData <- packageData(pkgStream, maxAgeSecs)
```

Sidebar {.sidebar}
=======================================================================

### cran.rstudio.com

Lorem ipsum
[jcheng5/cransim](https://github.com/jcheng5/cransim).

<style type="text/css"> .sidebar { overflow: auto; } </style>

```{r}
# Rate at which to flag high download traffic
# sliderInput("rateThreshold", "Warn when rate exceeds:",
#             min = 0, max = 50, value = 3, step = 0.1
# )

# Maximum number of raw data rows to keep
numericInput("maxrows", "Recent downloads window:", 50)

dateRangeInput("daterange1", "Date range:",
                 start = Sys.Date() - 362,
                 end   = Sys.Date())

selectizeInput(inputId = 'tickers', 
               label = 'tickers', 
               choices = stocks$Symbol, 
               selected = c('AAPL'), 
               multiple = FALSE,
               options = NULL)

```


```{r}

clean_stock_data <- reactive({
  stocks <- tidyquant::tq_get(
    c(input$tickers, 'SPY', 'DJI', 'AKRX'), 
    complete_cases = TRUE, 
    from = input$daterange1[[1]], 
    to = input$daterange1[[2]]
  )

clean_stock_data <- 
  stocks %>% 
  group_by(symbol) %>% 
  arrange(symbol, desc(date)) %>% 
  mutate(diff = (close - lead(close))/lead(close))
})


pivoted_stock_data <- reactive({
  clean_stock_data() %>% 
  select(symbol, diff, date) %>% 
  pivot_wider(names_from = symbol, values_from = diff) %>% 
  filter(complete.cases(.))
})

correl <- reactive({
  pivoted_stock_data() %>% 
    select(-date) %>% 
    cor
})

sigma_stock <- reactive({
  pivoted_stock_data() %>% 
    .[,2] %>% 
    unlist %>% 
    sd
})

sigma_market <- reactive({
  pivoted_stock_data() %>% 
    .[,3] %>% 
    unlist %>% 
    sd
})
```


Dashboard
=======================================================================

Row 
-----------------------------------------------------------------------

### Correlation

```{r}
# Emit the download rate
renderValueBox({
  value <- round(correl()[[3]], 2)
  valueBox(
    value = value,
    icon = "fa-area-chart",
    color = if (value >= .5) "warning" else "primary"
  )
})
```

### Alpha

```{r}
# Emit the download rate
renderValueBox({
  valueBox(
    value = 1.32,
    icon = "fa-area-chart",
    color = if (1.32 <= .5) "warning" else "primary"
  )
})
```


### Beta {.value-box} 

```{r}
# Emit the download rate
renderValueBox({
  value <- round(correl()[[3]], 2)
  valueBox(
    value = round(value*sigma_stock()/sigma_market(), 2),
    icon = "fa-area-chart",
    color = if (value <= .5) "warning" else "primary"
  )
})
```


### Cap
```{r}
renderGauge({
  gauge(42, min = 0, max = 100, symbol = '%', gaugeSectors(
  success = c(80, 100), warning = c(40, 79), danger = c(0, 39)
))
})
```

### Unique users {.value-box}

```{r}
# usrCount is a reactive expression that keeps an approximate
# count of all of the unique users that have been seen since the
# app started.
usrCount <- userCount(pkgStream)

# Emit the user count
renderValueBox({
  valueBox(value = usrCount(), icon = "fa-users")
})
```

Row {data-height=450}
-----------------------------------------------------------------------

### Market Comparison {data-width=450}
```{r}
renderPlot({
  ggplot(clean_stock_data()) + 
    aes(x = date, y = close) + 
    geom_line() +
    facet_wrap(. ~ symbol, scales = 'free_y') +
    theme(axis.text.x=element_text(angle=45,hjust=1)) +
    theme_tq() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
})
```


### Codecov Breakout {data-width=640}

```{r}
r2d3(data = jsonlite::read_json("flare.json"), d3_version = 4, script = "treemap.js")
```

### Daily Return v. Market
```{r}
renderPlot({
  print(pivoted_stock_data())
  pivoted_stock_data() %>% 
    ggplot() +
    aes(x = SPY, y = !!sym(input$tickers)) +
    geom_density_2d(alpha = .4) +
    geom_point(alpha = 1, size = .5) +
    geom_smooth(method = lm, se = FALSE) +
    geom_vline(xintercept = 0, alpha = .3) +
    geom_hline(yintercept = 0, alpha = .3) +
    theme_tq()
    # xlim(-.05, .05) +
    # ylim(-.05, .05) # +
    # bbc_style()
})
```

<!-- Column {data-width=400} -->
<!-- ------------------------------------- -->

<!-- ### Total downloads {.value-box} -->
<!-- ```{r} -->
<!-- gauge(50, min = 0, max = 100, symbol = '%', gaugeSectors( -->
<!--   success = c(80, 100), warning = c(40, 79), danger = c(0, 39) -->
<!-- )) -->
<!-- ``` -->

<!-- ### Total downloads {.value-box} -->
<!-- ```{r} -->
<!-- gauge(50, min = 0, max = 100, symbol = '%', gaugeSectors( -->
<!--   success = c(80, 100), warning = c(40, 79), danger = c(0, 39) -->
<!-- )) -->
<!-- ``` -->



Row {data-height=650}
-----------------------------------------------------------------------

### Percent of downloads (last 5 min) {data-width=440}

```{r}
renderD3({
  r2d3(data = read.csv("dji-latest.csv"), 
     d3_version = 4, 
     container = "div", 
     options = list(start = 2006, end = 2011), 
     script = "calendar.js")
})
```

### Processing - last 60 hours
```{r}
renderD3({
r2d3(d3_version = 4, script = "stackedbars.js")
})
```



Recent Downloads
=======================================================================

### Recent Downlads

```{r}
renderTable({
  downloads <- tail(pkgData(), n = input$maxrows)
  downloads <- downloads[,c("date", "time", "size", "r_version",
                            "r_arch", "r_os", "package")]
  downloads[order(nrow(downloads):1),]
})
```

Team Structure
=======================================================================

### Recent Downlads

```{r}
renderTable({
  downloads <- tail(pkgData(), n = input$maxrows)
  downloads <- downloads[,c("date", "time", "size", "r_version",
                            "r_arch", "r_os", "package")]
  downloads[order(nrow(downloads):1),]
})
```


